Microsoft (R) Macro Assembler Version 14.14.26433.0	    12/01/18 13:22:35
7CombinationsCalculator    (CombincationsCalculator.asm	     Page 1 - 1


				TITLE CombinationsCalculator    (CombincationsCalculator.asm)

				; Author: Joel Huffman
				; Last Modified: 12/01/2018
				; OSU email address: huffmajo@oregonstate.edu
				; Course number/section: CS271-400
				; Project Number: 6b             Due Date: 12/02/2018 
				; Description: Provide randomized r and n values for a combination problem to the user and prompt
				; for an answer. Then check and provide feedback on the correctness of the answer. Keep creating
				; problems until the user chooses to quit.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000C			N_HIGH = 12
 = 00000003			N_LOW = 3
 = 00000001			R_LOW = 1

				;----------------------------------------------------
				; displayString
				;
				; Prints the provided string.
				;
				; Parameters: @str
				; Returns: nothing
				; Preconditions: none
				; Postconditions: none
				; Registers changed: edx
				;----------------------------------------------------
				displayString MACRO str
					push	edx
					mov		edx, str
					call	WriteString
					pop		edx
				ENDM

 00000000			.data

 00000000 43 6F 6D 62 69	programTitle		BYTE	"Combinations Calculator by Joel Huffman", 0
	   6E 61 74 69 6F
	   6E 73 20 43 61
	   6C 63 75 6C 61
	   74 6F 72 20 62
	   79 20 4A 6F 65
	   6C 20 48 75 66
	   66 6D 61 6E 00
 00000028 2A 2A 45 43 3A	ec_1				BYTE	"**EC: Problems are numbered with total score printed at end of program.", 0
	   20 50 72 6F 62
	   6C 65 6D 73 20
	   61 72 65 20 6E
	   75 6D 62 65 72
	   65 64 20 77 69
	   74 68 20 74 6F
	   74 61 6C 20 73
	   63 6F 72 65 20
	   70 72 69 6E 74
	   65 64 20 61 74
	   20 65 6E 64 20
	   6F 66 20 70 72
	   6F 67 72 61 6D
	   2E 00
 00000070 49 27 6C 6C 20	instruct_1			BYTE	"I'll give you a combinations problem. You enter your answer,", 0
	   67 69 76 65 20
	   79 6F 75 20 61
	   20 63 6F 6D 62
	   69 6E 61 74 69
	   6F 6E 73 20 70
	   72 6F 62 6C 65
	   6D 2E 20 59 6F
	   75 20 65 6E 74
	   65 72 20 79 6F
	   75 72 20 61 6E
	   73 77 65 72 2C
	   00
 000000AD 61 6E 64 20 49	instruct_2			BYTE	"and I'll let you know if you're right.", 0
	   27 6C 6C 20 6C
	   65 74 20 79 6F
	   75 20 6B 6E 6F
	   77 20 69 66 20
	   79 6F 75 27 72
	   65 20 72 69 67
	   68 74 2E 00
 000000D4 50 72 6F 62 6C	problemStr			BYTE	"Problem ", 0
	   65 6D 20 00
 000000DD 4E 75 6D 62 65	nStr				BYTE	"Number of elements in set: ", 0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 69
	   6E 20 73 65 74
	   3A 20 00
 000000F9 4E 75 6D 62 65	rStr				BYTE	"Number of elements to choose from the set: ", 0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 74
	   6F 20 63 68 6F
	   6F 73 65 20 66
	   72 6F 6D 20 74
	   68 65 20 73 65
	   74 3A 20 00
 00000125 48 6F 77 20 6D	answerPrompt		BYTE	"How many combinations are there: ", 0
	   61 6E 79 20 63
	   6F 6D 62 69 6E
	   61 74 69 6F 6E
	   73 20 61 72 65
	   20 74 68 65 72
	   65 3A 20 00
 00000147 54 68 65 72 65	answerStr1			BYTE	"There are ", 0
	   20 61 72 65 20
	   00
 00000152 20 63 6F 6D 62	answerStr2			BYTE	" combinations of ", 0
	   69 6E 61 74 69
	   6F 6E 73 20 6F
	   66 20 00
 00000164 20 69 74 65 6D	answerStr3			BYTE	" items from a set of ", 0
	   73 20 66 72 6F
	   6D 20 61 20 73
	   65 74 20 6F 66
	   20 00
 0000017A 59 6F 75 20 61	correctStr			BYTE	"You are correct!", 0
	   72 65 20 63 6F
	   72 72 65 63 74
	   21 00
 0000018B 59 6F 75 20 61	wrongStr			BYTE	"You are wrong :(", 0
	   72 65 20 77 72
	   6F 6E 67 20 3A
	   28 00
 0000019C 41 6E 6F 74 68	repeatPrompt		BYTE	"Another problem? (y/n)", 0
	   65 72 20 70 72
	   6F 62 6C 65 6D
	   3F 20 28 79 2F
	   6E 29 00
 000001B3 49 6E 76 61 6C	invalidPrompt		BYTE	"Invalid response. ", 0
	   69 64 20 72 65
	   73 70 6F 6E 73
	   65 2E 20 00
 000001C6 54 68 61 6E 6B	goodBye				BYTE	"Thanks for using the Combinations Calculator!", 0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 74 68 65
	   20 43 6F 6D 62
	   69 6E 61 74 69
	   6F 6E 73 20 43
	   61 6C 63 75 6C
	   61 74 6F 72 21
	   00
 000001F4 4E 75 6D 62 65	numCorrectStr		BYTE	"Number of problems answered correctly: ", 0
	   72 20 6F 66 20
	   70 72 6F 62 6C
	   65 6D 73 20 61
	   6E 73 77 65 72
	   65 64 20 63 6F
	   72 72 65 63 74
	   6C 79 3A 20 00
 0000021C 4E 75 6D 62 65	numWrongStr			BYTE	"Number of problems answered incorrectly: ", 0
	   72 20 6F 66 20
	   70 72 6F 62 6C
	   65 6D 73 20 61
	   6E 73 77 65 72
	   65 64 20 69 6E
	   63 6F 72 72 65
	   63 74 6C 79 3A
	   20 00
 00000246 00000000		n					DWORD	?		;randomized n value [3..12]
 0000024A 00000000		r					DWORD	?		;randomized r value [1..n]
 0000024E 00000001		nFactorial			DWORD	1		;calculated value of n!
 00000252 00000001		rFactorial			DWORD	1		;calculated value of r!
 00000256 00000001		n_rFactorial		DWORD	1		;calculated value of (n-r)!
 0000025A 00000000		userAnswer			DWORD	?		;user-submitted answer
 0000025E 00000000		actualAnswer		DWORD	?		;calculated answer
 00000262 00000001		problemNum			DWORD	1		;the number of problem the user is solving
 00000266 00000000		score				DWORD	0		;quantity of problems answered correctly


 00000000			.code
 00000000			main PROC
				;seed randomize 
 00000000  E8 00000000 E		call	Randomize
				;display introduction and instructions
 00000005  68 00000000 R		push	OFFSET programTitle	;+20
 0000000A  68 00000028 R		push	OFFSET ec_1			;+16
 0000000F  68 00000070 R		push	OFFSET instruct_1	;+12
 00000014  68 000000AD R		push	OFFSET instruct_2	;+8
 00000019  E8 00000104			call	introduction
				;calculate and show problem to user
 0000001E			displayProblem:
 0000001E  FF 35 00000262 R		push	problemNum	;+28
 00000024  68 000000D4 R		push	OFFSET problemStr	;+24
 00000029  68 000000DD R		push	OFFSET nStr			;+20
 0000002E  68 000000F9 R		push	OFFSET rStr			;+16
 00000033  68 00000246 R		push	OFFSET n			;+12
 00000038  68 0000024A R		push	OFFSET r			;+8
 0000003D  E8 00000123			call	showProblem
				;prompt for and get answer from user
 00000042  68 00000125 R		push	OFFSET answerPrompt	;+12
 00000047  68 0000025A R		push	OFFSET userAnswer	;+8
 0000004C  E8 00000191			call	getData
				;calculate combinations
 00000051  FF 35 00000246 R		push	n					;+28
 00000057  68 0000024E R		push	OFFSET nFactorial	;+24
 0000005C  FF 35 0000024A R		push	r					;+20
 00000062  68 00000252 R		push	OFFSET rFactorial	;+16
 00000067  68 00000256 R		push	OFFSET n_rFactorial	;+12
 0000006C  68 0000025E R		push	OFFSET actualAnswer	;+8
 00000071  E8 00000193			call	combination
				;show results and give user feedback
 00000076  68 00000266 R		push	OFFSET score		;+44
 0000007B  FF 35 0000025E R		push	actualAnswer		;+40
 00000081  FF 35 00000246 R		push	n					;+36
 00000087  FF 35 0000024A R		push	r					;+32
 0000008D  FF 35 0000025A R		push	userAnswer			;+28
 00000093  68 00000147 R		push	OFFSET answerStr1	;+24
 00000098  68 00000152 R		push	OFFSET answerStr2	;+20
 0000009D  68 00000164 R		push	OFFSET answerStr3	;+16
 000000A2  68 0000017A R		push	OFFSET correctStr	;+12
 000000A7  68 0000018B R		push	OFFSET wrongStr		;+8
 000000AC  E8 000001C7			call	showResults
				;check for repeat
 000000B1			repeatCheck:
					displayString	OFFSET repeatPrompt
 000000B1  52		     1		push	edx
 000000B2  BA 0000019C R     1		mov		edx, OFFSET repeatPrompt
 000000B7  E8 00000000 E     1		call	WriteString
 000000BC  5A		     1		pop		edx
 000000BD  E8 00000000 E		call			readChar
 000000C2  3C 6E			cmp				al, 110			;check for 'n'
 000000C4  74 35			je				theEnd
 000000C6  3C 79			cmp				al, 121			;check for 'y'
 000000C8  74 13			je				resetPrep
 000000CA  E8 00000000 E		call			CrLf
					displayString	OFFSET invalidPrompt
 000000CF  52		     1		push	edx
 000000D0  BA 000001B3 R     1		mov		edx, OFFSET invalidPrompt
 000000D5  E8 00000000 E     1		call	WriteString
 000000DA  5A		     1		pop		edx
 000000DB  EB D4			jmp				repeatCheck
 000000DD			resetPrep:
 000000DD  68 00000262 R		push			OFFSET problemNum	;+20
 000000E2  68 0000024E R		push			OFFSET nFactorial	;+16
 000000E7  68 00000252 R		push			OFFSET rFactorial	;+12
 000000EC  68 00000256 R		push			OFFSET n_rFactorial	;+8
 000000F1  E8 000001FA			call			resetFactorials		
 000000F6  E9 FFFFFF23			jmp				displayProblem
				;say goodbye
 000000FB			theEnd:
 000000FB  68 0000021C R		push	OFFSET numWrongStr			;+24
 00000100  68 000001F4 R		push	OFFSET numCorrectStr		;+20
 00000105  FF 35 00000262 R		push	problemNum					;+16
 0000010B  FF 35 00000266 R		push	score						;+12
 00000111  68 000001C6 R		push	OFFSET goodBye				;+8
 00000116  E8 00000208			call	programEnd
					exit	; exit to operating system
 0000011B  6A 00	   *	    push   +000000000h
 0000011D  E8 00000000 E   *	    call   ExitProcess
 00000122			main ENDP

				;----------------------------------------------------
				; introduction
				;
				; Displays an introduction message outlining what the
				; program does and who wrote it.
				;
				; Parameters: @programTitle, @ec_1, @instruct1, @instruct2 
				; Returns: nothing
				; Preconditions: none
				; Postconditions: none
				; Registers changed: edx
				;----------------------------------------------------
 00000122			introduction PROC
 00000122  55				push			ebp
 00000123  8B EC			mov				ebp, esp
					displayString	[ebp+20]	;print title and author
 00000125  52		     1		push	edx
 00000126  8B 55 14	     1		mov		edx, [ebp+20]
 00000129  E8 00000000 E     1		call	WriteString
 0000012E  5A		     1		pop		edx
 0000012F  E8 00000000 E		call			CrLf
					displayString	[ebp+16]	;print ec
 00000134  52		     1		push	edx
 00000135  8B 55 10	     1		mov		edx, [ebp+16]
 00000138  E8 00000000 E     1		call	WriteString
 0000013D  5A		     1		pop		edx
 0000013E  E8 00000000 E		call			CrLf
 00000143  E8 00000000 E		call			CrLf
					displayString	[ebp+12]	;print instructions
 00000148  52		     1		push	edx
 00000149  8B 55 0C	     1		mov		edx, [ebp+12]
 0000014C  E8 00000000 E     1		call	WriteString
 00000151  5A		     1		pop		edx
 00000152  E8 00000000 E		call			CrLf
					displayString	[ebp+8]		;print additional instructions
 00000157  52		     1		push	edx
 00000158  8B 55 08	     1		mov		edx, [ebp+8]
 0000015B  E8 00000000 E     1		call	WriteString
 00000160  5A		     1		pop		edx
 00000161  5D				pop				ebp
 00000162  C2 0010			ret				16
 00000165			introduction ENDP

				;----------------------------------------------------
				; ShowProblem
				;
				; Calculates a value for n [3..12] and r [1..n]. Then
				; Lets the user now those values.
				; 
				; Parameters: problemNum, @problemStr, @nStr, @rStr, @n, @r
				; Returns: n and r values
				; Preconditions: none
				; Postconditions: n and r values are not populated
				; Registers changed: eax, ebx, ecx, edx
				;----------------------------------------------------
 00000165			showProblem PROC
 00000165  55				push			ebp
 00000166  8B EC			mov				ebp, esp
 00000168  60				pushad
 00000169  E8 00000000 E		call			CrLf
 0000016E  E8 00000000 E		call			CrLf
				;generate value for n [3..12]
 00000173  8B 5D 0C			mov				ebx, [ebp+12]
 00000176  B8 0000000C			mov				eax, N_HIGH
 0000017B  83 E8 03			sub				eax, N_LOW
 0000017E  40				inc				eax
 0000017F  E8 00000000 E		call			RandomRange
 00000184  83 C0 03			add				eax, N_LOW
 00000187  89 03			mov				[ebx], eax	
				;generate value for r [1..n]
 00000189  8B 4D 08			mov				ecx, [ebp+8]
 0000018C  83 E8 01			sub				eax, R_LOW
 0000018F  40				inc				eax
 00000190  E8 00000000 E		call			RandomRange
 00000195  83 C0 01			add				eax, R_LOW
 00000198  89 01			mov				[ecx], eax
				;print problem to screen for user
					displayString	[ebp+24]		;print "problem "
 0000019A  52		     1		push	edx
 0000019B  8B 55 18	     1		mov		edx, [ebp+24]
 0000019E  E8 00000000 E     1		call	WriteString
 000001A3  5A		     1		pop		edx
 000001A4  8B 45 1C			mov				eax, [ebp+28]
 000001A7  E8 00000000 E		call			WriteDec
 000001AC  E8 00000000 E		call			CrLf
					displayString	[ebp+20]		;print setup for n
 000001B1  52		     1		push	edx
 000001B2  8B 55 14	     1		mov		edx, [ebp+20]
 000001B5  E8 00000000 E     1		call	WriteString
 000001BA  5A		     1		pop		edx
 000001BB  8B 03			mov				eax, [ebx]		;print n
 000001BD  E8 00000000 E		call			writeDec		
 000001C2  E8 00000000 E		call			CrLf
					displayString	[ebp+16]		;print setup for r
 000001C7  52		     1		push	edx
 000001C8  8B 55 10	     1		mov		edx, [ebp+16]
 000001CB  E8 00000000 E     1		call	WriteString
 000001D0  5A		     1		pop		edx
 000001D1  8B 01			mov				eax, [ecx]		;print r
 000001D3  E8 00000000 E		call			writeDec		
 000001D8  E8 00000000 E		call			CrLf
 000001DD  61				popad
 000001DE  5D				pop				ebp
 000001DF  C2 0018			ret				24
 000001E2			showProblem ENDP

				;----------------------------------------------------
				; getData
				;
				; Prompts the user for an answer to the problem. That
				; answer is then stored in the userAnswer variable
				; 
				; Parameters: @userAnswer @answerPrompt
				; Returns: user-submitted userAnswer 
				; Preconditions: none
				; Postconditions: userAnswer is now populated
				; Registers changed: eax, ebx
				;----------------------------------------------------
 000001E2			getData PROC
 000001E2  55				push			ebp
 000001E3  8B EC			mov				ebp, esp
 000001E5  60				pushad
					displayString	[ebp+12]		;print prompt for answer
 000001E6  52		     1		push	edx
 000001E7  8B 55 0C	     1		mov		edx, [ebp+12]
 000001EA  E8 00000000 E     1		call	WriteString
 000001EF  5A		     1		pop		edx
 000001F0  8B 5D 08			mov				ebx, [ebp+8]	;load @userAnswer
 000001F3  E8 00000000 E		call			readInt
 000001F8  89 03			mov				[ebx], eax
 000001FA  E8 00000000 E		call			CrLf
 000001FF  E8 00000000 E		call			CrLf
 00000204  61				popad
 00000205  5D				pop				ebp
 00000206  C2 0008			ret				8
 00000209			getData ENDP

				;----------------------------------------------------
				; combination
				;
				; Calculates the actual number of combinations using
				; the following equation: n!/[r!*(n-r)!]
				; 
				; Parameters: n, @nFactorial, r, @rFactorial, 
				; @n_rFactorial, @actualAnswer
				; Returns: actuaAnswer has the calculated answer
				; Preconditions: n and r must be determined
				; Postconditions: actualAnswer now has the correct
				; answer
				; Registers changed: eax, ebx, ecx, edx, edi
				;----------------------------------------------------
 00000209			combination PROC
 00000209  55				push	ebp
 0000020A  8B EC			mov		ebp, esp
 0000020C  60				pushad
				;calculate (n-r)!
 0000020D  8B 45 1C			mov		eax, [ebp+28]	;load n
 00000210  8B 5D 14			mov		ebx, [ebp+20]	;load r
 00000213  2B C3			sub		eax, ebx
 00000215  8B 5D 0C			mov		ebx, [ebp+12]	;load @n_rFactorial
 00000218  53				push	ebx
 00000219  50				push	eax
 0000021A  E8 00000032			call	factorial
				;calculate r!
 0000021F  8B 45 14			mov		eax, [ebp+20]	;load r
 00000222  8B 4D 10			mov		ecx, [ebp+16]	;load @rFactorial
 00000225  51				push	ecx
 00000226  50				push	eax
 00000227  E8 00000025			call	factorial

				;calculate n!
 0000022C  8B 45 1C			mov		eax, [ebp+28]	;load n
 0000022F  8B 7D 18			mov		edi, [ebp+24]	;load @nFactorial
 00000232  57				push	edi
 00000233  50				push	eax
 00000234  E8 00000018			call	factorial
				;calculate r!(n-r!)
 00000239  8B 13			mov		edx, [ebx]		
 0000023B  8B 01			mov		eax, [ecx]
 0000023D  F7 E2			mul		edx				
 0000023F  8B C8			mov		ecx, eax		;ecx now contains r!(n-r!)
				;calculate n!/[r!(n-r)!]
 00000241  8B 07			mov		eax, [edi]
 00000243  33 D2			xor		edx, edx
 00000245  F7 F1			div		ecx
				;put result in actualAnswer
 00000247  8B 5D 08			mov		ebx, [ebp+8]
 0000024A  89 03			mov		[ebx], eax
 0000024C  61				popad
 0000024D  5D				pop		ebp
 0000024E  C2 0008			ret		8
 00000251			combination ENDP

				;----------------------------------------------------
				; factorial
				;
				; Calculates the input value's factorial and returns 
				; this factorial in the output's address. Behold the 
				; power of RECURSION!
				;
				; Parameters: input, @output
				; Returns: input's factorial in @output
				; Preconditions: input must be positive
				; Postconditions: @output now has input's factorial
				; Registers changed: eax, ebx, ecx, edx
				;----------------------------------------------------
 00000251			factorial PROC
 00000251  55				push	ebp
 00000252  8B EC			mov		ebp, esp
 00000254  60				pushad
 00000255  8B 4D 0C			mov		ecx, [ebp+12]	;@output
 00000258  8B 5D 08			mov		ebx, [ebp+8]	;input
 0000025B  83 FB 00			cmp		ebx, 0
 0000025E  74 13			je		quit
 00000260  8B 01			mov		eax, [ecx]
 00000262  F7 E3			mul		ebx
 00000264  89 01			mov		[ecx], eax
 00000266  83 FB 01			cmp		ebx, 1
 00000269  74 08			je		quit
 0000026B			recurse:
 0000026B  4B				dec		ebx
 0000026C  51				push	ecx
 0000026D  53				push	ebx
 0000026E  E8 FFFFFFDE			call	factorial
 00000273			quit:
 00000273  61				popad
 00000274  5D				pop		ebp
 00000275  C2 0008			ret		8
 00000278			factorial ENDP

				;----------------------------------------------------
				; showResults
				;
				; Prints n, r and and the calculated answer. Then lets
				; the user know if their submitted answer was correct.
				; Increments score if user is correct.
				; 
				; Parameters: @score, actualAnswer, n, r, userAnswer, 
				; @answerStr1, @answerStr2, @answerStr3, @correctStr, 
				; @wrongStr
				; Returns: none
				; Preconditions: All parameters are populated 
				; Postconditions: none
				; Registers changed: eax, ebx
				;----------------------------------------------------
 00000278			showResults PROC
 00000278  55				push			ebp
 00000279  8B EC			mov				ebp, esp
 0000027B  60				pushad
					displayString	[ebp+24]	
 0000027C  52		     1		push	edx
 0000027D  8B 55 18	     1		mov		edx, [ebp+24]
 00000280  E8 00000000 E     1		call	WriteString
 00000285  5A		     1		pop		edx
 00000286  8B 45 28			mov				eax, [ebp+40]	;print actualAnswer
 00000289  E8 00000000 E		call			WriteDec
					displayString	[ebp+20]
 0000028E  52		     1		push	edx
 0000028F  8B 55 14	     1		mov		edx, [ebp+20]
 00000292  E8 00000000 E     1		call	WriteString
 00000297  5A		     1		pop		edx
 00000298  8B 45 20			mov				eax, [ebp+32]	;print r
 0000029B  E8 00000000 E		call			writeDec
					displayString	[ebp+16]
 000002A0  52		     1		push	edx
 000002A1  8B 55 10	     1		mov		edx, [ebp+16]
 000002A4  E8 00000000 E     1		call	WriteString
 000002A9  5A		     1		pop		edx
 000002AA  8B 45 24			mov				eax, [ebp+36]	;print n
 000002AD  E8 00000000 E		call			writeDec
 000002B2  E8 00000000 E		call			CrLf
				;verify user answer
 000002B7  8B 45 28			mov				eax, [ebp+40]	;load calculated answer
 000002BA  8B 5D 1C			mov				ebx, [ebp+28]	;load users answer
 000002BD  3B C3			cmp				eax, ebx
 000002BF  74 0C			je				isCorrect
 000002C1			isWrong:
					displayString	[ebp+8]
 000002C1  52		     1		push	edx
 000002C2  8B 55 08	     1		mov		edx, [ebp+8]
 000002C5  E8 00000000 E     1		call	WriteString
 000002CA  5A		     1		pop		edx
 000002CB  EB 14			jmp				endResults
 000002CD			isCorrect:
					displayString	[ebp+12]
 000002CD  52		     1		push	edx
 000002CE  8B 55 0C	     1		mov		edx, [ebp+12]
 000002D1  E8 00000000 E     1		call	WriteString
 000002D6  5A		     1		pop		edx
 000002D7  8B 45 2C			mov				eax, [ebp+44]	;load @score
 000002DA  BB 00000001			mov				ebx, 1
 000002DF  01 18			add				[eax], ebx
 000002E1			endResults:
 000002E1  E8 00000000 E		call			CrLf
 000002E6  E8 00000000 E		call			CrLf
 000002EB  61				popad
 000002EC  5D				pop				ebp
 000002ED  C2 0024			ret				36
 000002F0			showResults ENDP

				;----------------------------------------------------
				; resetFactorials
				;
				; Resets the factorial values to 1 for repeated problems. 
				; Also increments problemNum.
				;
				; Parameters: @problemNum, @nfactorial, @rFactorial, @n_rFactorial
				; Returns: All factorials with a value of 1
				; Preconditions: none
				; Postconditions: All factorials are populated with 1
				; Registers changed: eax, ebx
				;----------------------------------------------------
 000002F0			resetFactorials PROC
 000002F0  55				push	ebp
 000002F1  8B EC			mov		ebp, esp
 000002F3  60				pushad
 000002F4  BB 00000001			mov		ebx, 1
 000002F9  8B 45 10			mov		eax, [ebp+16]
 000002FC  89 18			mov		[eax], ebx
 000002FE  8B 45 0C			mov		eax, [ebp+12]
 00000301  89 18			mov		[eax], ebx
 00000303  8B 45 08			mov		eax, [ebp+8]
 00000306  89 18			mov		[eax], ebx
 00000308  8B 45 14			mov		eax, [ebp+20]	;load @problemNum
 0000030B  01 18			add		[eax], ebx		;increment problemNum
 0000030D  61				popad
 0000030E  5D				pop		ebp
 0000030F  C2 000C			ret		12
 00000312			resetFactorials ENDP

 00000312  FF 35 00000262 R		push	problemNum			;+16
 00000318  FF 35 00000266 R		push	score				;+12
 0000031E  68 000001C6 R		push	OFFSET goodBye		;+8
				;----------------------------------------------------
				; programEnd
				;
				; Prints the users final score and a parting message. 
				;
				; Parameters: @numWrongStr, @numCorrectStr, problemNum,
				; score, @goodBye
				; Returns: nothing
				; Preconditions: none
				; Postconditions: none
				; Registers changed: eax, ebx
				;----------------------------------------------------
 00000323			programEnd PROC
 00000323  55				push			ebp
 00000324  8B EC			mov				ebp, esp
 00000326  E8 00000000 E		call			CrLf
 0000032B  E8 00000000 E		call			CrLf
					displayString	[ebp+20]		;print string for correct answers
 00000330  52		     1		push	edx
 00000331  8B 55 14	     1		mov		edx, [ebp+20]
 00000334  E8 00000000 E     1		call	WriteString
 00000339  5A		     1		pop		edx
 0000033A  8B 45 0C			mov				eax, [ebp+12]	;load score
 0000033D  8B D8			mov				ebx, eax
 0000033F  E8 00000000 E		call			writeDec
 00000344  E8 00000000 E		call			CrLf
					displayString	[ebp+24]		;print string for wrong answers
 00000349  52		     1		push	edx
 0000034A  8B 55 18	     1		mov		edx, [ebp+24]
 0000034D  E8 00000000 E     1		call	WriteString
 00000352  5A		     1		pop		edx
 00000353  8B 45 10			mov				eax, [ebp+16]	;load problemNum
 00000356  2B C3			sub				eax, ebx		;problemNum - score = #wrong
 00000358  E8 00000000 E		call			WriteDec
 0000035D  E8 00000000 E		call			CrLf
					displayString	[ebp+8]		;print parting message
 00000362  52		     1		push	edx
 00000363  8B 55 08	     1		mov		edx, [ebp+8]
 00000366  E8 00000000 E     1		call	WriteString
 0000036B  5A		     1		pop		edx
 0000036C  E8 00000000 E		call			CrLf
 00000371  5D				pop				ebp
 00000372  C2 0004			ret				4
 00000375			programEnd ENDP

				END main
Microsoft (R) Macro Assembler Version 14.14.26433.0	    12/01/18 13:22:35
7CombinationsCalculator    (CombincationsCalculator.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000026A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000375 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
combination  . . . . . . . . . .	P Near	 00000209 _TEXT	Length= 00000048 Public STDCALL
factorial  . . . . . . . . . . .	P Near	 00000251 _TEXT	Length= 00000027 Public STDCALL
  recurse  . . . . . . . . . . .	L Near	 0000026B _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000273 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000001E2 _TEXT	Length= 00000027 Public STDCALL
introduction . . . . . . . . . .	P Near	 00000122 _TEXT	Length= 00000043 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000122 Public STDCALL
  displayProblem . . . . . . . .	L Near	 0000001E _TEXT	
  repeatCheck  . . . . . . . . .	L Near	 000000B1 _TEXT	
  resetPrep  . . . . . . . . . .	L Near	 000000DD _TEXT	
  theEnd . . . . . . . . . . . .	L Near	 000000FB _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
programEnd . . . . . . . . . . .	P Near	 00000323 _TEXT	Length= 00000052 Public STDCALL
resetFactorials  . . . . . . . .	P Near	 000002F0 _TEXT	Length= 00000022 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showProblem  . . . . . . . . . .	P Near	 00000165 _TEXT	Length= 0000007D Public STDCALL
showResults  . . . . . . . . . .	P Near	 00000278 _TEXT	Length= 00000078 Public STDCALL
  isWrong  . . . . . . . . . . .	L Near	 000002C1 _TEXT	
  isCorrect  . . . . . . . . . .	L Near	 000002CD _TEXT	
  endResults . . . . . . . . . .	L Near	 000002E1 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
N_HIGH . . . . . . . . . . . . .	Number	 0000000Ch   
N_LOW  . . . . . . . . . . . . .	Number	 00000003h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
R_LOW  . . . . . . . . . . . . .	Number	 00000001h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
actualAnswer . . . . . . . . . .	DWord	 0000025E _DATA	
answerPrompt . . . . . . . . . .	Byte	 00000125 _DATA	
answerStr1 . . . . . . . . . . .	Byte	 00000147 _DATA	
answerStr2 . . . . . . . . . . .	Byte	 00000152 _DATA	
answerStr3 . . . . . . . . . . .	Byte	 00000164 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
correctStr . . . . . . . . . . .	Byte	 0000017A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ec_1 . . . . . . . . . . . . . .	Byte	 00000028 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodBye  . . . . . . . . . . . .	Byte	 000001C6 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruct_1 . . . . . . . . . . .	Byte	 00000070 _DATA	
instruct_2 . . . . . . . . . . .	Byte	 000000AD _DATA	
invalidPrompt  . . . . . . . . .	Byte	 000001B3 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nFactorial . . . . . . . . . . .	DWord	 0000024E _DATA	
nStr . . . . . . . . . . . . . .	Byte	 000000DD _DATA	
n_rFactorial . . . . . . . . . .	DWord	 00000256 _DATA	
numCorrectStr  . . . . . . . . .	Byte	 000001F4 _DATA	
numWrongStr  . . . . . . . . . .	Byte	 0000021C _DATA	
n  . . . . . . . . . . . . . . .	DWord	 00000246 _DATA	
problemNum . . . . . . . . . . .	DWord	 00000262 _DATA	
problemStr . . . . . . . . . . .	Byte	 000000D4 _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
rFactorial . . . . . . . . . . .	DWord	 00000252 _DATA	
rStr . . . . . . . . . . . . . .	Byte	 000000F9 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
repeatPrompt . . . . . . . . . .	Byte	 0000019C _DATA	
r  . . . . . . . . . . . . . . .	DWord	 0000024A _DATA	
score  . . . . . . . . . . . . .	DWord	 00000266 _DATA	
userAnswer . . . . . . . . . . .	DWord	 0000025A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wrongStr . . . . . . . . . . . .	Byte	 0000018B _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
